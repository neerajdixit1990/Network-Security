								 DNS Poisoning & Detection 
								============================
								============================
								Name 	  	: Neeraj Mohan Dixit
								SBU ID  	: 109951838
                                                                ============================
                                                                ============================
	

=============
COMPILE & RUN
=============
The program has code file "dnsinject.c", "dnsdetect.c", makefile "Makefile", sample pcap file for attack "dns_spoof_attack.pcap" & sample attack file "attack"
The program can be compiled by typing "make" in the project directory (executable name is dnsinject & dnsdetect)
Use "make clean" to delete the executables generated by this program
The input for the program 
	dnsinject [-i interface] [-f hostnames] expression
	dnsdetect [-i interface] [-r tracefile] expression
	(dnsdetect can either read from pcap file (-r option) OR can sniff on a live device (-i option) (NOT BOTH))
	----------- VERY IMPORTANT -----------
	dnsinject works everytime for name server 8.8.8.8. The program may fail for local dns server 
	dnsdetect works every time for all inputs
	-------------------------------------
The program has to be run with root permission (Appropriate error messages given in program)
The program would set the device in PROMISCUOUS mode but some devices/OS do not allow this setting
(We end up capturing the traffic from our own machine in that case)
The command line BPF filter has to match syntax completely else an error is thrown
The attack file is attached along with submission for reference. The format should be followed (1 space between IP & hostname) 

===============
IMPLEMENTATION
===============
------dnsinject------
	- capture dns query packets from the specified interface
	- If -f option is provided check the target file for spoofed IP address else give our own IP address
	- Create a UDP raw socket and set IP_HDRINCL option
	- Create the IP, UDP headers of spoofed IP and snd it
	
------dnsdetect------
	- capture dns query packets from the specified interface (-i option)
	- Read pcap file for (-r option)
	- Filter out DNS responses and check the TXID in the global array
	- If there is a match, then check the answers for that DNS response. If they are same continue with execution else print a warning about DNS poisoning
	- If there is no match then store the TXID in the global array

====================
SAMPLE O/P dnsinject
====================
victim@ubuntu:~/net-sec/Assignment-4$ nslookup www.google.com 8.8.8.8
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	www.google.com
Address: 192.168.88.140

victim@ubuntu:~/net-sec/Assignment-4$ nslookup www.vit.edu 8.8.8.8
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	www.vit.edu
Address: 192.168.88.140

victim@ubuntu:~/net-sec/Assignment-4$ nslookup www.cs.stonybrook.edu 8.8.8.8
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	www.cs.stonybrook.edu
Address: 192.168.88.140

victim@ubuntu:~/net-sec/Assignment-4$ nslookup www.facebook.com 8.8.8.8
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	www.facebook.com
Address: 192.168.88.140

victim@ubuntu:~/net-sec/Assignment-4$ nslookup www.intel.com 8.8.8.8
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	www.intel.com
Address: 192.168.88.140

victim@ubuntu:~/net-sec/Assignment-4$ nslookup www.github.com 8.8.8.8
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	www.github.com
Address: 192.168.88.140

victim@ubuntu:~/net-sec/Assignment-4$ nslookup web.whatsapp.com 8.8.8.8
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	web.whatsapp.com
Address: 192.168.88.140

====================
SAMPLE O/P dnsdetect
====================
root@ubuntu:~/net-sec/Assignment-4# ./dnsdetect -r dns_spoof_attack.pcap 

Reading from pcap file: dns_spoof_attack.pcap

=======================================================================
@@@@@@@@ DNS Poisoning Attack @@@@@@@

Domain name = www.google.com
Transaction ID = 6045
Answer 1 = IP: 192.168.88.140
Answer 2 = IP: 216.58.219.228	
=======================================================================

=======================================================================
@@@@@@@@ DNS Poisoning Attack @@@@@@@

Domain name = www.vit.edu
Transaction ID = 32340
Answer 1 = IP: 192.168.88.140
Answer 2 = IP: 208.91.199.147	
=======================================================================

=======================================================================
@@@@@@@@ DNS Poisoning Attack @@@@@@@

Domain name = www.cs.stonybrook.edu
Transaction ID = 15774
Answer 1 = IP: 192.168.88.140
Answer 2 = IP: 130.245.27.2	
=======================================================================

=======================================================================
@@@@@@@@ DNS Poisoning Attack @@@@@@@

Domain name = www.facebook.com
Transaction ID = 46732
Answer 1 = IP: 192.168.88.140
Answer 2 = IP: 31.13.69.228	
=======================================================================

=======================================================================
@@@@@@@@ DNS Poisoning Attack @@@@@@@

Domain name = www.intel.com
Transaction ID = 33550
Answer 1 = IP: 192.168.88.140
Answer 2 = IP: 129.49.1.73	IP: 129.49.1.71	
=======================================================================

=======================================================================
@@@@@@@@ DNS Poisoning Attack @@@@@@@

Domain name = www.github.com
Transaction ID = 37700
Answer 1 = IP: 192.168.88.140
Answer 2 = IP: 192.30.252.120	
=======================================================================

=======================================================================
@@@@@@@@ DNS Poisoning Attack @@@@@@@

Domain name = web.whatsapp.com
Transaction ID = 32170
Answer 1 = IP: 192.168.88.140
Answer 2 = IP: 31.13.66.49	
=======================================================================

==========
REFERENCES
==========
http://www.tcpipguide.com/free/t_DNSMessageHeaderandQuestionSectionFormat.htm
http://www.ccs.neu.edu/home/amislove/teaching/cs4700/fall09/handouts/project1-primer.pdf
http://www.binarytides.com/dns-query-code-in-c-with-linux-sockets/
http://stackoverflow.com/questions/11770451/what-is-the-meaning-of-attribute-packed-aligned4
http://stackoverflow.com/questions/18452716/are-udp-packets-dropped-when-udp-header-checksum-is-incorrect
http://www.binarytides.com/raw-udp-sockets-c-linux/

http://www.zytrax.com/books/dns/ch15/
http://www.firewall.cx/networking-topics/protocols/domain-name-system-dns/161-protocols-dns-response.html
http://stackoverflow.com/questions/9865084/dns-response-answer-authoritative-section

http://www.binarytides.com/raw-udp-sockets-c-linux/
http://www.slashroot.in/linux-kernel-rpfilter-settings-reverse-path-filtering
http://man7.org/linux/man-pages/man3/getifaddrs.3.html
http://stackoverflow.com/questions/20800319/how-do-i-get-my-ip-address-in-c-on-linux
http://www.roman10.net/2011/11/27/how-to-calculate-iptcpudp-checksumpart-1-theory/

http://stackoverflow.com/questions/20800319/how-do-i-get-my-ip-address-in-c-on-linux
http://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine
