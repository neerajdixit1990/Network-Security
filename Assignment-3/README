                                                                      Plugboard Proxy  
                                                                ============================
                                                                ============================
                                                                Name            : Neeraj Mohan Dixit
                                                                SBU ID          : 109951838
                                                                ============================
                                                                ============================
            

=============
COMPILE & RUN 
=============
- The program has code file "pbproxy.c", key file "key" & makefile "Makefile"
- The program can be compiled by typing "make" in the project directory (executable name is pbproxy)
- Use "make clean" to delete the executables generated by this program
- The input for the program is of type "pbproxy [-l port] -k keyfile destination port"
- The program has to be run with root permission (Appropriate error messages given in program)
- Make sure that the SSH daemon is running and the port has permission to be connected else program gives error:
  "Connection terminated by SSH server, check for permission on SSH port"
  "Unable to connect to SSH port !!!
   Please check the SSH port no. & permission"
- Check whether the server is reachable from the client else program gives error like
  "Unable to connect client to server !!!"
- Please make sure that the key is 16 bytes long and it is same for client & server, else the SSH connection would 
  be terminated with "Bad Packet" message 






===============
IMPLEMENTATION
===============
The plugboard proxy is used to protect services against day one vulnerabilities during connection initiation

CLIENT
-------
- The client creates a socket & connects to server on listening port
- Client reads input from stdin and sends it to server via socket
- Client also reads output from the socket & writes to stdout
- Every message sent to server is encrypted & every message from server is decrypted
- select() system call is used to monitor socket & stdin simultaneously
- TCP_NO_DELAY socket option is used to avoid buffering of stream as 2 packets might be read by TCP as a single packet
- Also a small delay is introduced after sending data to server to ensure that 2 data packets are not coalesced into 1
  (hack to avoid TCP coalescing)

SERVER
------
- The server listens for input connections on listening port
- Connection is accepted once a request comes in & request is sent to a service handler
- The service handler established a TCP socket with SSH port (Any errors are reported)
- Now the server monitors for 2 sockets
  1) Accepted connection
  2) SSH socket
- Any message on accepted connection is decrypted & sent to SSH server
- Any message on SSH socket is encrypted & sent to client
- The pbproxy can service only 1 client at a time as multi-threading is not implemented
- To avoid the coalescing of TCP packets, TCP_NO_DELAY socket option & a small delay is introduced after every send 
  (hack to avoid TCP coalescing)





==========
SAMPLE RUN
===========
Client
------
neeraj@neeraj:~/Desktop/Network-Security/Assignment-3$ ssh -o "ProxyCommand ./pbproxy -k key localhost 60000" localhost
neeraj@localhost's password: 
Welcome to Ubuntu 14.04.4 LTS (GNU/Linux 3.16.0-69-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

*** System restart required ***
Last login: Fri Apr  8 21:12:35 2016 from localhost
neeraj@neeraj:~$ 


Server
------
neeraj@neeraj:~/Desktop/Network-Security/Assignment-3$ ./pbproxy -k key -l 60000 localhost 22

Setting up pbproxy for SSH server
Listening Port = 60000
Destination = localhost
SSH Port = 22

----------------------------------------------------
New incoming request from 127.0.0.1
Completed request for 127.0.0.1
----------------------------------------------------

----------------------------------------------------
New incoming request from 127.0.0.1
Completed request for 127.0.0.1
----------------------------------------------------







TESTING
=======
- The code was tested where client & server both are on same machine (server = localhost, client = localhost)
- Unable to test it at Amazon Web Services VM's as 'Amazon-Key pair' is required for SSH communication






REFERENCES
===========
http://www.firmcodes.com/how-do-aes-128-bit-cbc-mode-encryption-c-programming-code-openssl/
http://stackoverflow.com/questions/10065993/how-to-switch-to-netcat-traditional-in-ubuntu
http://unix.stackexchange.com/questions/247074/ssh-protocol-mismatch
http://www.unixmen.com/play-with-netcat-in-ubuntu/
http://stackoverflow.com/questions/3141860/aes-ctr-256-encryption-mode-of-operation-on-openssl
http://stackoverflow.com/questions/20039066/aes-ctr128-encrypt-string-and-vice-versa-ansi-c
http://www.gurutechnologies.net/blog/aes-ctr-encryption-in-c/

TCP combining packet issue:
---------------------------
http://www.ibm.com/developerworks/library/l-sockpit/
http://www.gamedev.net/topic/581736-tcp-combined-packets-arriving-on-server/
http://www.drdobbs.com/tcp-programming-gotchas/184416578
https://social.technet.microsoft.com/Forums/en-US/999eb83e-c6c5-4bed-acbd-01a5090d8e7c/combining-frames-into-tcp-packets?forum=netmon
https://ask.wireshark.org/questions/33143/tcp-packets-being-combined-on-the-way-to-a-server
http://stackoverflow.com/questions/19618822/how-to-make-sure-that-tcp-packets-will-not-combine-to-another-packets
